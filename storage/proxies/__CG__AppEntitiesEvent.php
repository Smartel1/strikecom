<?php

namespace DoctrineProxies\__CG__\App\Entities;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Event extends \App\Entities\Event implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'title_ru', 'title_en', 'title_es', 'content_ru', 'content_en', 'content_es', 'date', 'views', 'source_link', 'photos', 'videos', 'tags', 'user', 'conflict', 'eventStatus', 'eventType', 'comments', 'createdAt', 'updatedAt'];
        }

        return ['__isInitialized__', 'id', 'title_ru', 'title_en', 'title_es', 'content_ru', 'content_en', 'content_es', 'date', 'views', 'source_link', 'photos', 'videos', 'tags', 'user', 'conflict', 'eventStatus', 'eventType', 'comments', 'createdAt', 'updatedAt'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Event $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getVideos()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVideos', []);

        return parent::getVideos();
    }

    /**
     * {@inheritDoc}
     */
    public function setVideos($videos)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVideos', [$videos]);

        return parent::setVideos($videos);
    }

    /**
     * {@inheritDoc}
     */
    public function getPhotos()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPhotos', []);

        return parent::getPhotos();
    }

    /**
     * {@inheritDoc}
     */
    public function setPhotos($photos)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPhotos', [$photos]);

        return parent::setPhotos($photos);
    }

    /**
     * {@inheritDoc}
     */
    public function getTags()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTags', []);

        return parent::getTags();
    }

    /**
     * {@inheritDoc}
     */
    public function setTags($tags)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTags', [$tags]);

        return parent::setTags($tags);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser(): ?\App\Entities\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', []);

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser(\App\Entities\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', [$user]);

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getConflict(): ?\App\Entities\Conflict
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getConflict', []);

        return parent::getConflict();
    }

    /**
     * {@inheritDoc}
     */
    public function setConflict(?\App\Entities\Conflict $conflict): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setConflict', [$conflict]);

        parent::setConflict($conflict);
    }

    /**
     * {@inheritDoc}
     */
    public function getEventStatus(): ?\App\Entities\References\EventStatus
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEventStatus', []);

        return parent::getEventStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setEventStatus(?\App\Entities\References\EventStatus $eventStatus): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEventStatus', [$eventStatus]);

        parent::setEventStatus($eventStatus);
    }

    /**
     * {@inheritDoc}
     */
    public function getEventType(): ?\App\Entities\References\EventType
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEventType', []);

        return parent::getEventType();
    }

    /**
     * {@inheritDoc}
     */
    public function setEventType(?\App\Entities\References\EventType $eventType): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEventType', [$eventType]);

        parent::setEventType($eventType);
    }

    /**
     * {@inheritDoc}
     */
    public function getComments()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getComments', []);

        return parent::getComments();
    }

    /**
     * {@inheritDoc}
     */
    public function setComments($comments): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setComments', [$comments]);

        parent::setComments($comments);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitleRu()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitleRu', []);

        return parent::getTitleRu();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitleRu($title_ru)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitleRu', [$title_ru]);

        return parent::setTitleRu($title_ru);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitleEn()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitleEn', []);

        return parent::getTitleEn();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitleEn($title_en)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitleEn', [$title_en]);

        return parent::setTitleEn($title_en);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitleEs()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitleEs', []);

        return parent::getTitleEs();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitleEs($title_es)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitleEs', [$title_es]);

        return parent::setTitleEs($title_es);
    }

    /**
     * {@inheritDoc}
     */
    public function getContentRu()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContentRu', []);

        return parent::getContentRu();
    }

    /**
     * {@inheritDoc}
     */
    public function setContentRu($content_ru)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContentRu', [$content_ru]);

        return parent::setContentRu($content_ru);
    }

    /**
     * {@inheritDoc}
     */
    public function getContentEn()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContentEn', []);

        return parent::getContentEn();
    }

    /**
     * {@inheritDoc}
     */
    public function setContentEn($content_en)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContentEn', [$content_en]);

        return parent::setContentEn($content_en);
    }

    /**
     * {@inheritDoc}
     */
    public function getContentEs()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContentEs', []);

        return parent::getContentEs();
    }

    /**
     * {@inheritDoc}
     */
    public function setContentEs($content_es)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContentEs', [$content_es]);

        return parent::setContentEs($content_es);
    }

    /**
     * {@inheritDoc}
     */
    public function getDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDate', []);

        return parent::getDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setDate($date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDate', [$date]);

        return parent::setDate($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getViews()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getViews', []);

        return parent::getViews();
    }

    /**
     * {@inheritDoc}
     */
    public function setViews($views)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setViews', [$views]);

        return parent::setViews($views);
    }

    /**
     * {@inheritDoc}
     */
    public function getSourceLink()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSourceLink', []);

        return parent::getSourceLink();
    }

    /**
     * {@inheritDoc}
     */
    public function setSourceLink($source_link)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSourceLink', [$source_link]);

        return parent::setSourceLink($source_link);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitleByLocale(string $locale): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitleByLocale', [$locale]);

        return parent::getTitleByLocale($locale);
    }

    /**
     * {@inheritDoc}
     */
    public function getContentByLocale(string $locale): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContentByLocale', [$locale]);

        return parent::getContentByLocale($locale);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTime $createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(\DateTime $updatedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        return parent::setUpdatedAt($updatedAt);
    }

}
